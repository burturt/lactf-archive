def main():
    import pickle
    pickle.encode_long.__code__ = pickle.encode_long.__code__
    import time
    from collections import deque
    dim = 20
    # fmt: off
    cksum = 140447092963680462851258172325
    boards = [{(6, 12), (3, 4), (4, 9), (19, 6), (9, 5), (14, 19), (5, 16), (19, 9), (10, 0), (8, 6), (8, 9), (10, 9), (17, 12), (8, 3), (1, 3), (16, 7), (7, 7), (14, 9), (17, 5), (14, 12), (4, 11), (5, 12), (8, 11), (19, 8), (8, 14), (19, 14), (9, 16), (0, 16), (11, 16), (16, 3), (18, 12), (16, 18), (7, 18), (4, 7), (4, 1), (4, 4), (4, 16), (5, 5), (8, 4), (17, 1), (19, 1), (11, 0), (14, 17), (0, 6), (16, 2), (1, 13), (2, 15), (18, 5), (15, 12), (16, 11)}, {(6, 18), (6, 15), (1, 16), (17, 3), (17, 9), (5, 1), (14, 13), (5, 10), (8, 9), (14, 19), (11, 5), (10, 9), (9, 11), (2, 5), (8, 15), (1, 18), (12, 3), (18, 11), (14, 6), (14, 9), (3, 9), (5, 3), (17, 11), (4, 11), (5, 15), (8, 14), (11, 10), (2, 7), (9, 19), (2, 13), (6, 7), (18, 6), (14, 2), (5, 2), (12, 17), (3, 8), (3, 17), (17, 10), (17, 16), (0, 3), (2, 0), (17, 19), (8, 13), (2, 9), (10, 16), (15, 0), (13, 3), (15, 9), (13, 15), (6, 3)}, {(7, 17), (18, 17), (3, 1), (3, 10), (3, 16), (5, 13), (5, 1), (8, 3), (8, 18), (1, 12), (6, 2), (16, 16), (15, 17), (6, 17), (14, 0), (17, 2), (14, 9), (5, 3), (9, 1), (17, 14), (8, 11), (8, 5), (10, 5), (8, 17), (2, 7), (15, 4), (13, 1), (1, 5), (0, 13), (19, 17), (7, 9), (6, 13), (12, 8), (17, 7), (4, 13), (19, 1), (9, 9), (14, 17), (5, 14), (5, 17), (11, 9), (10, 7), (10, 1), (9, 15), (0, 12), (0, 15), (10, 19), (18, 2), (16, 11), (15, 15)}, {(3, 4), (14, 4), (12, 10), (3, 7), (4, 6), (5, 7), (19, 6), (4, 15), (19, 3), (0, 5), (0, 8), (2, 8), (11, 17), (15, 17), (7, 13), (3, 0), (4, 5), (14, 3), (14, 18), (3, 18), (12, 18), (3, 15), (19, 5), (8, 11), (19, 11), (0, 10), (11, 10), (13, 7), (10, 8), (0, 13), (2, 16), (15, 10), (7, 9), (7, 6), (16, 18), (12, 5), (4, 4), (4, 16), (4, 19), (19, 1), (17, 16), (19, 7), (9, 12), (11, 12), (0, 12), (13, 6), (7, 2), (18, 2), (13, 15), (15, 12)}, {(8, 0), (5, 13), (19, 3), (0, 2), (10, 0), (9, 8), (2, 2), (9, 17), (0, 8), (11, 8), (10, 15), (7, 4), (7, 1), (16, 10), (15, 14), (6, 8), (15, 17), (18, 13), (12, 3), (0, 18), (3, 6), (17, 11), (4, 17), (9, 7), (5, 12), (0, 4), (11, 13), (0, 19), (15, 13), (16, 6), (18, 12), (6, 10), (16, 18), (12, 11), (7, 18), (17, 4), (3, 11), (3, 14), (4, 19), (0, 3), (17, 19), (13, 0), (5, 17), (2, 3), (9, 18), (15, 6), (1, 13), (1, 10), (11, 18), (16, 17)}, {(4, 6), (4, 12), (3, 10), (9, 2), (17, 6), (17, 12), (11, 2), (9, 8), (9, 14), (10, 3), (17, 18), (9, 17), (2, 11), (0, 11), (15, 8), (12, 6), (4, 5), (3, 6), (3, 12), (19, 11), (9, 10), (19, 14), (8, 17), (15, 4), (11, 13), (2, 10), (10, 17), (1, 14), (16, 6), (15, 10), (6, 13), (15, 19), (6, 16), (16, 18), (12, 5), (3, 2), (17, 4), (4, 16), (17, 1), (3, 8), (3, 17), (8, 7), (1, 1), (9, 12), (11, 9), (19, 10), (2, 0), (2, 6), (7, 11), (15, 18)}, {(4, 0), (12, 7), (3, 4), (14, 7), (19, 0), (19, 6), (4, 15), (3, 19), (10, 0), (14, 19), (9, 14), (13, 11), (18, 1), (1, 15), (12, 3), (14, 6), (4, 5), (4, 14), (3, 12), (19, 2), (9, 1), (11, 1), (8, 14), (19, 14), (2, 7), (0, 13), (0, 19), (11, 19), (1, 14), (13, 16), (13, 13), (16, 12), (15, 19), (6, 19), (5, 2), (3, 8), (5, 5), (19, 4), (8, 4), (3, 14), (19, 7), (19, 10), (1, 4), (8, 13), (16, 2), (13, 6), (7, 2), (0, 18), (6, 3), (16, 11)}, {(7, 17), (9, 5), (0, 2), (14, 13), (10, 0), (9, 14), (19, 18), (8, 18), (9, 11), (13, 2), (16, 4), (1, 9), (16, 7), (13, 8), (15, 11), (1, 18), (2, 17), (13, 17), (15, 14), (7, 13), (4, 2), (12, 15), (4, 11), (19, 11), (17, 17), (11, 10), (19, 17), (8, 17), (1, 11), (11, 13), (0, 19), (13, 16), (6, 7), (6, 13), (16, 18), (7, 18), (17, 4), (19, 4), (4, 13), (4, 19), (14, 17), (10, 4), (13, 3), (15, 6), (9, 18), (2, 6), (2, 15), (16, 14), (7, 11), (7, 8)}, {(6, 18), (7, 17), (14, 4), (14, 1), (5, 16), (10, 6), (0, 17), (10, 15), (16, 7), (13, 14), (6, 5), (16, 13), (18, 19), (14, 6), (4, 14), (17, 5), (8, 2), (8, 5), (5, 18), (5, 12), (19, 8), (11, 7), (13, 4), (0, 16), (18, 5), (13, 10), (15, 7), (18, 0), (16, 6), (16, 12), (15, 10), (6, 13), (16, 15), (15, 19), (16, 18), (14, 2), (12, 11), (9, 0), (17, 7), (19, 7), (17, 13), (0, 9), (5, 17), (15, 0), (2, 6), (16, 5), (1, 10), (7, 5), (16, 17), (7, 14)}, {(12, 7), (3, 1), (3, 10), (12, 19), (9, 5), (8, 3), (10, 0), (3, 19), (17, 6), (9, 14), (10, 3), (5, 19), (17, 18), (11, 14), (2, 11), (2, 8), (15, 11), (16, 16), (6, 14), (3, 0), (3, 3), (5, 6), (17, 5), (3, 12), (4, 17), (8, 8), (0, 7), (2, 4), (9, 16), (13, 1), (1, 11), (2, 10), (6, 4), (18, 3), (6, 16), (7, 15), (7, 18), (4, 10), (5, 5), (4, 13), (3, 17), (0, 9), (5, 17), (9, 15), (8, 19), (1, 7), (16, 5), (7, 2), (6, 6), (13, 15)}]
    # fmt: on

    snek = deque([(0, 0)])
    curdir = (1, 0)
    cb = 0
    iq = deque([])
    deet = []

    while True:
        tot = ""
        for i in range(dim):
            s = ""
            for j in range(dim):
                if (i, j) in snek:
                    s += "#"
                elif (i, j) in boards[cb]:
                    s += "o"
                else:
                    s += "."
            tot += s + "\n"
        print(tot, flush=True)
        if len(iq) > 0:
            inp = iq.popleft()
            if isinstance(inp, int) or inp.isdigit():
                inp = int(inp)
                inp -= 1
                if inp > 0:
                    iq.appendleft(inp)
                head = snek[0]
                new_head = (head[0] + curdir[0], head[1] + curdir[1])
                if new_head[0] < 0 or new_head[0] >= dim or new_head[1] < 0 or new_head[1] >= dim:
                    print("snek dead :(")
                    break
                snek.appendleft(new_head)
                if new_head in boards[cb]:
                    cb += 1
                    deet.append(new_head)
                    if cb == len(boards):
                        accum = 0
                        for (a, b) in deet:
                            accum ^= 1337
                            accum *= dim ** 2
                            accum += a * dim + b
                        if cksum == accum:
                            print("snek happy :D")
                            print(open("flag.txt", "r").read().strip())
                        else:
                            print("snek sad :(")
                        break
                else:
                    snek.pop()
            elif inp == "L":
                curdir = (-curdir[1], curdir[0])
            elif inp == "R":
                curdir = (curdir[1], -curdir[0])
            else:
                print("snek confused :(")
                break
            time.sleep(0.1)
        else:
            iq.extend(input("snek? ").strip().split())
if __name__ == "__main__":
    main()
